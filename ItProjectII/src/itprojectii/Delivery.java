/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package itprojectii;

import BEANS.Product;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author weak_2030
 */
public class Delivery extends javax.swing.JPanel {

    /**
     * Creates new form Delivery
     */
    public Delivery() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        productsListDeliveryTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        deliveryTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        removeFromListButton = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        supplierComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Open Sans", 0, 24)); // NOI18N
        jLabel1.setText("Delivery Acknowledgement");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 10, -1, -1));

        productsListDeliveryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Product ID", "Name", "Description", "Category", "Current Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(productsListDeliveryTable);
        productsListDeliveryTable.getColumnModel().getColumn(0).setMaxWidth(0);
        productsListDeliveryTable.getColumnModel().getColumn(0).setMinWidth(0);
        productsListDeliveryTable.getColumnModel().getColumn(0).setPreferredWidth(0);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 90, 450, 370));

        deliveryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Name", "Description", "Category", "Quantity delivered"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(deliveryTable);
        deliveryTable.getColumnModel().getColumn(0).setMaxWidth(0);
        deliveryTable.getColumnModel().getColumn(0).setMinWidth(0);
        deliveryTable.getColumnModel().getColumn(0).setPreferredWidth(0);
        deliveryTable.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);

        add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 170, 480, 290));

        jLabel2.setText("Delivery Summary (Items Received)");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 150, -1, -1));

        jLabel3.setText("Products List");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        removeFromListButton.setText("Remove From List");
        removeFromListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFromListButtonActionPerformed(evt);
            }
        });
        add(removeFromListButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 470, -1, -1));

        jButton3.setText("Save Delivery");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 520, 200, 50));

        jButton2.setText("Add To List");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 240, 90, 50));

        supplierComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        supplierComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierComboBoxActionPerformed(evt);
            }
        });
        add(supplierComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 480, 200, -1));
        updateSupplierComboBox();

        jLabel4.setText("Supplier:");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 480, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    String host = "jdbc:mysql://localhost:3306/inventory";
        String uName = "root";
        String uPass = "";
    private void removeFromListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFromListButtonActionPerformed
        Integer truckTableSelectedRow = deliveryTable.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) deliveryTable.getModel();
        
        model.removeRow(truckTableSelectedRow);
        
        
    }//GEN-LAST:event_removeFromListButtonActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        DefaultTableModel model = (DefaultTableModel) deliveryTable.getModel();
        boolean flag = false;
        try{
            for(int row = 0; row<model.getRowCount();row++ ){
                String quantity = (String) deliveryTable.getModel().getValueAt(row, 4);
                
                if(quantity == null){
                    JOptionPane.showMessageDialog(null,
                        "Please set the quantity received from delivery to all products in the delivery list.",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                    flag = true;
                    break;
                }
            }
            if(!flag){
                    PreparedStatement insertStatement = null;
                    PreparedStatement selectStatement = null;
                    Connection con = DriverManager.getConnection(host,uName, uPass);
                    
                    String supplierName = supplierComboBox.getSelectedItem().toString();
                    System.out.print(supplierName);
                    Statement stmt = con.createStatement( );
                    
                    String typeSelectString = "SELECT supplier_id FROM supplier WHERE supplier_name = ? LIMIT 1";
                    selectStatement = con.prepareStatement(typeSelectString);
                    
                    selectStatement.setString(1,supplierName);
                    ResultSet rs = selectStatement.executeQuery();

                    rs.next();
                    String supplierID = rs.getString(1);
                    long timeNow = System.currentTimeMillis();
                   
                    
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    Date date = new Date(timeNow);
                    
                                       
                    String insertString = "INSERT INTO delivery (supplier_id, date_order_received) VALUES(?,?)";
                    insertStatement = con.prepareStatement(insertString);

                    insertStatement.setString(1, supplierID);
                    insertStatement.setDate(2, date);
                    insertStatement.executeUpdate();
                    
                    
                    String selectString = "SELECT delivery_id FROM delivery ORDER BY 1 DESC LIMIT 1";
                    selectStatement = con.prepareStatement(selectString);
                    
                    ResultSet result = selectStatement.executeQuery();

                    result.next();
                    String deliveryID = result.getString(1);
                    
                    
                for(int row = 0; row<model.getRowCount();row++){

                    String deliveryInsertString = "INSERT INTO deliverydetails (delivery_id, product_id, quantity_delivered) VALUES(?,?,?)";
                    insertStatement = con.prepareStatement(deliveryInsertString);
                    
                    String deliveryProductID = (String) deliveryTable.getModel().getValueAt(row, 0);
                    String quantity = (String) deliveryTable.getModel().getValueAt(row, 4);
                    System.out.print("Quantity"+quantity);
                    insertStatement.setString(1, deliveryID);
                    insertStatement.setString(2, deliveryProductID);
                    insertStatement.setString(3, quantity);
                    insertStatement.executeUpdate();

                    

                    
                }
                JOptionPane.showMessageDialog(null, "Delivery aknowledged");
                deleteAllRows(deliveryTable);
                
            }
        }catch ( SQLException err ){
                System.out.println( err.getMessage ());
                System.out.print("FAIL");
            }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Integer transferTableSelectedRow = productsListDeliveryTable.getSelectedRow();
        String transferProductID = (String) productsListDeliveryTable.getModel().getValueAt(transferTableSelectedRow, 0);
        
        boolean flag = false;
        
        for(int row = 0; row < deliveryTable.getRowCount(); row++){
            String deliveryProductID = (String) deliveryTable.getModel().getValueAt(row, 0);
            if(transferProductID.equals(deliveryProductID)){
                flag = true;
            }else{
                flag = false;
            }
        }
        if(flag){
            JOptionPane.showMessageDialog(null,
                "Item already in delivery list.",
                "Error",
                JOptionPane.ERROR_MESSAGE);
        }else{
        String name = (String) productsListDeliveryTable.getModel().getValueAt(transferTableSelectedRow, 1);
        String description = (String) productsListDeliveryTable.getModel().getValueAt(transferTableSelectedRow, 2);
        String category = (String) productsListDeliveryTable.getModel().getValueAt(transferTableSelectedRow, 3);
        
        DefaultTableModel model = (DefaultTableModel) deliveryTable.getModel();
        model.addRow(new Object[]{transferProductID, name, description, category, ""});
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void supplierComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_supplierComboBoxActionPerformed
    private static void deleteAllRows(final JTable table) {
        
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        for(int row =0; row < model.getRowCount(); ) {
            model.removeRow(0);
        
        }
    }
    public static void updateProductsListDeliveryTable(){
        
        deleteAllRows(productsListDeliveryTable);
        DefaultTableModel model = (DefaultTableModel) productsListDeliveryTable.getModel();

        for(Product product: Main.productList){
            model.addRow(new Object[]{product.getProductID(), product.getName(), product.getDescription(), product.getTypeName(), product.getPhysicalCount()});
        }
    }
    public void updateSupplierComboBox(){
            supplierComboBox.removeAllItems();
            PreparedStatement selectStatement = null;
            try{
            Connection con = DriverManager.getConnection(host,uName, uPass);
            String selectString = "SELECT supplier_name, supplier_id FROM supplier ORDER BY 1 ASC";
            selectStatement = con.prepareStatement(selectString);
            ResultSet rs = selectStatement.executeQuery();
                while(rs.next()){
                    String supplierName = rs.getString(1);
                    String supplierID = rs.getString(2);
                    
                    String supplier[] = {supplierName, supplierID};
                    
                    supplierComboBox.addItem(supplierName);
                }

            }
            catch ( SQLException err ){
                System.out.println( err.getMessage ());
                System.out.print("FAIL");
            }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable deliveryTable;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public static javax.swing.JTable productsListDeliveryTable;
    private javax.swing.JButton removeFromListButton;
    private javax.swing.JComboBox supplierComboBox;
    // End of variables declaration//GEN-END:variables
}
